-----APARTMENT_TYPE insertion procedure--------

set serveroutput on;
create or replace PROCEDURE apartment_type_insertion
(
    p_APARTMENT_TYPE_ID APARTMENT_TYPE.APARTMENT_TYPE_ID%TYPE,
   
    p_LOCALITY APARTMENT_TYPE.LOCALITY%TYPE, 
  
   
    p_APARTMENT_TYPE APARTMENT_TYPE.APARTMENT_TYPE%TYPE,
     p_NUMBER_OF_ROOMS APARTMENT_TYPE.NUMBER_OF_ROOMS%TYPE,
       p_NUMBER_OF_BATHS APARTMENT_TYPE.NUMBER_OF_BATHS%TYPE
   )
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');
INSERT INTO APARTMENT_TYPE(APARTMENT_TYPE_ID,LOCALITY,APARTMENT_TYPE,NUMBER_OF_ROOMS,NUMBER_OF_BATHS) VALUES ( p_APARTMENT_TYPE_ID ,p_LOCALITY, p_APARTMENT_TYPE,p_NUMBER_OF_ROOMS, p_NUMBER_OF_BATHS);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('DUPLICATE APARTMENT_TYPE_ID IS NOT ALLOWED');
END apartment_type_insertion;

CALL apartment_type_insertion ('AT21','Star-Market','Apartment','2',1)
CALL apartment_type_insertion ('AT21','Star','Apartment','2',1)
SELECT * FROM  APARTMENT_TYPE;
describe APARTMENT_TYPE;








----------EMPLOYEE-ROLES insertion procedure----------------

set serveroutput on;
create or replace PROCEDURE employee_roles_insertion
(
    p_ROLE_ID EMPLOYEE_ROLES.ROLE_ID%TYPE,
   
    p_ROLE_TYPE EMPLOYEE_ROLES.ROLE_TYPE%TYPE --Using apartment table as we want to check if the apartment exists in apartment table
)
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');
INSERT INTO EMPLOYEE_ROLES(ROLE_ID,ROLE_TYPE) VALUES (p_ROLE_ID , p_ROLE_TYPE);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('DUPLICATE ROLE_ID IS NOT ALLOWED');
END employee_roles_insertion;

CALL employee_roles_insertion('R4','ABC')
CALL employee_roles_insertion('R4','AC')
