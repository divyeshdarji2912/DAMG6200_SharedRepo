SELECT APARTMENT.APARTMENT_ID, APARTMENT_UTILITY.UTILITY_ID, UTILITY.UTILITY_NAME FROM APARTMENT
JOIN APARTMENT_UTILITY ON APARTMENT.APARTMENT_ID=APARTMENT_UTILITY.APARTMENT_ID
JOIN UTILITY ON APARTMENT_UTILITY.UTILITY_ID=UTILITY.UTILITY_ID
WHERE LOWER(APARTMENT_UTILITY.IS_INCLUDED_IN_RENT)= LOWER('YES');

SELECT APARTMENT.APARTMENT_ID, APARTMENT_UTILITY.UTILITY_ID, APARTMENT.MONTHLY_RENT, UTILITY.UTILITY_NAME FROM APARTMENT
JOIN APARTMENT_UTILITY ON APARTMENT.APARTMENT_ID=APARTMENT_UTILITY.APARTMENT_ID
JOIN UTILITY ON APARTMENT_UTILITY.UTILITY_ID=UTILITY.UTILITY_ID
WHERE LOWER(APARTMENT_UTILITY.IS_INCLUDED_IN_RENT)= LOWER('YES') AND APARTMENT.MONTHLY_RENT=3200; 

SELECT APARTMENT.APARTMENT_ID, LEASE_DETAILS.LEASE_ID, LEASE_DETAILS.LEASE_STATUS, 
CUSTOMERS.CUSTOMER_FIRST_NAME, CUSTOMERS.CUSTOMER_LAST_NAME,
PAYMENT.PAYMENT_ID, PAYMENT.AMOUNT_TRANSFERRED FROM APARTMENT 
JOIN LEASE_DETAILS ON APARTMENT.APARTMENT_ID=LEASE_DETAILS.APARTMENT_ID 
JOIN CUSTOMERS ON LEASE_DETAILS.LEASE_ID=CUSTOMERS.LEASE_ID 
JOIN PAYMENT ON LEASE_DETAILS.LEASE_ID=PAYMENT.LEASE_ID;

--DETAILS ABOUT CURRENT MONTH PAYMENT DONE OF APARTMENTS
SELECT APARTMENT.APARTMENT_ID, LEASE_DETAILS.LEASE_ID, to_char(sysdate,'Month') as CURRENT_MONTH, PAYMENT.TRANSACTION_DATE, 
CUSTOMERS.CUSTOMER_FIRST_NAME,
PAYMENT.PAYMENT_ID, PAYMENT.AMOUNT_TRANSFERRED FROM APARTMENT 
JOIN LEASE_DETAILS ON APARTMENT.APARTMENT_ID=LEASE_DETAILS.APARTMENT_ID 
JOIN CUSTOMERS ON LEASE_DETAILS.LEASE_ID=CUSTOMERS.LEASE_ID 
JOIN PAYMENT ON LEASE_DETAILS.LEASE_ID=PAYMENT.LEASE_ID
WHERE (to_char(transaction_date, 'mm') = to_char(sysdate, 'mm')
and to_char(transaction_date, 'yyyy') = to_char(sysdate, 'yyyy'));


SELECT ROUND(MONTHS_BETWEEN(END_DATE,START_DATE))  FROM LEASE_DETAILS;

SELECT  LEASE_DETAILS.LEASE_ID FROM APARTMENT 
JOIN LEASE_DETAILS ON APARTMENT.APARTMENT_ID=LEASE_DETAILS.APARTMENT_ID 
JOIN CUSTOMERS ON LEASE_DETAILS.LEASE_ID=CUSTOMERS.LEASE_ID 
JOIN PAYMENT ON LEASE_DETAILS.LEASE_ID=PAYMENT.LEASE_ID 
GROUP BY  LEASE_DETAILS.LEASE_ID HAVING COUNT(PAYMENT.LEASE_ID)=12;

SELECT  LEASE_DETAILS.LEASE_ID,ROUND(MONTHS_BETWEEN(END_DATE,START_DATE)) ,
COUNT(PAYMENT.LEASE_ID) AS NO_OF_PAYMENTS FROM APARTMENT 
JOIN LEASE_DETAILS ON APARTMENT.APARTMENT_ID=LEASE_DETAILS.APARTMENT_ID 
JOIN CUSTOMERS ON LEASE_DETAILS.LEASE_ID=CUSTOMERS.LEASE_ID 
JOIN PAYMENT ON LEASE_DETAILS.LEASE_ID=PAYMENT.LEASE_ID 
GROUP BY  LEASE_DETAILS.LEASE_ID,ROUND(MONTHS_BETWEEN(END_DATE,START_DATE));

--CHECK THE PAYMENTS ACCORDING TO LEASE TERM
SELECT PAYMENT.LEASE_ID, ROUND(MONTHS_BETWEEN(END_DATE,START_DATE)) AS LEASE_TERM, COUNT(PAYMENT.LEASE_ID)AS NUMBER_OF_PAYMENTS ,
ROUND(MONTHS_BETWEEN(END_DATE,START_DATE))-COUNT(PAYMENT.LEASE_ID) as DUE_FOR_NO_OF_MONTHS FROM PAYMENT
JOIN LEASE_DETAILS ON PAYMENT.LEASE_ID=LEASE_DETAILS.LEASE_ID
GROUP BY PAYMENT.LEASE_ID,ROUND(MONTHS_BETWEEN(END_DATE,START_DATE));

SELECT PAYMENT.LEASE_ID, ROUND(MONTHS_BETWEEN(END_DATE,START_DATE)) AS LEASE_TERM, COUNT(PAYMENT.TRANSACTION_DATE) AS NUMBER_OF_PAYMENTS,
ROUND(MONTHS_BETWEEN(END_DATE,START_DATE))-COUNT(PAYMENT.LEASE_ID) as DUE_FOR_NO_OF_MONTHS FROM PAYMENT
JOIN LEASE_DETAILS ON PAYMENT.LEASE_ID=LEASE_DETAILS.LEASE_ID
GROUP BY PAYMENT.LEASE_ID,ROUND(MONTHS_BETWEEN(END_DATE,START_DATE));









--PROCEDURE FOR INSERTING VALUES INTO LEASE-DETAILS
CREATE OR REPLACE PROCEDURE PROD1
(
    p_LEASE_ID LEASE_DETAILS.lease_id%TYPE,
   
    p2_APARTMENT_ID APARTMENT.APARTMENT_ID%TYPE, --Using apartment table as we want to check if the apartment exists in apartment table
   
    p_START_DATE lease_details.start_date%TYPE,
    p_END_DATE lease_details.end_date%TYPE,
    p_MEMBERS_ON_LEASE lease_details.members_on_lease%TYPE,
    p_LEASE_STATUS lease_details.lease_status%TYPE,
    
    p_CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE,
    p_CUSTOMER_FIRST_NAME CUSTOMERS.CUSTOMER_FIRST_NAME%TYPE,
    p_CUSTOMER_LAST_NAME CUSTOMERS.CUSTOMER_LAST_NAME%TYPE,
    p_CUSTOMER_CONTACT CUSTOMERS.CUSTOMER_CONTACT%TYPE,
    p_CUSTOMER_EMAIL CUSTOMERS.CUSTOMER_EMAIL%TYPE,
    p_CUSTOMER_APARTMENT_NUMBER CUSTOMERS.CUSTOMER_APARTMENT_NUMBER%TYPE,
    p_CUSTOMER_STREET_NUMBER CUSTOMERS.CUSTOMER_STREET_NUMBER%TYPE,
    p_CUSTOMER_STREET_NAME CUSTOMERS.CUSTOMER_STREET_NAME%TYPE,
    p_CUSTOMER_NEIGHBORHOOD CUSTOMERS.CUSTOMER_NEIGHBOURHOOD%TYPE,
    p_CIUSTOMER_CITY CUSTOMERS.CUSTOMER_CITY%TYPE,
    p_CUSTOMER_STATE CUSTOMERS.CUSTOMER_STATE%TYPE,
    p_CUSTOMER_COUNTRY CUSTOMERS.CUSTOMER_COUNTRY%TYPE,
    p_CUSTOMER_ZIPCODE CUSTOMERS.CUSTOMER_ZIPCODE%TYPE
    
  
)
AS
  count_months1 int;  
  count1 number;
  count2 number;
BEGIN 
    SELECT COUNT(*) INTO count1 from APARTMENT where upper(p2_APARTMENT_ID) like upper(APARTMENT_ID);
    SELECT COUNT(*) INTO count2 from CUSTOMERS where upper(p_CUSTOMER_ID) like upper(CUSTOMER_ID);
    SELECT MONTHS_BETWEEN(p_END_DATE,SYSDATE) into count_months1 FROM dual; --FOR CHECKING LEASE EXPIRED/ONGOING
    
    if((count_months1>0) AND (count2<=0) AND (count1>0) ) THEN  --Lease is ongoing and new customer
        INSERT INTO LEASE_DETAILS VALUES (p_LEASE_ID, p2_APARTMENT_ID,  p_START_DATE, p_END_DATE, p_MEMBERS_ON_LEASE, 'ON GOING');
        INSERT INTO CUSTOMERS VALUES(p_CUSTOMER_ID, p_LEASE_ID,p_CUSTOMER_FIRST_NAME, p_CUSTOMER_LAST_NAME, p_CUSTOMER_CONTACT,
                                     p_CUSTOMER_EMAIL, p_CUSTOMER_APARTMENT_NUMBER, p_CUSTOMER_STREET_NUMBER, p_CUSTOMER_STREET_NAME,
                                     p_CUSTOMER_NEIGHBORHOOD, p_CIUSTOMER_CITY, p_CUSTOMER_STATE, p_CUSTOMER_COUNTRY, p_CUSTOMER_ZIPCODE);
        
    else 
        if ((count_months1>=0) AND (count2>0) and (count1>0)) THEN  --Lease is ongoing and customer exists
            INSERT INTO LEASE_DETAILS VALUES (p_LEASE_ID, p2_APARTMENT_ID,  p_START_DATE, p_END_DATE, p_MEMBERS_ON_LEASE, 'ON GOING');
        elsif ((count_months1<0)and (count1>0)) THEN  --Lease has expired (customer will already exist)
            INSERT INTO LEASE_DETAILS VALUES (p_LEASE_ID, p2_APARTMENT_ID,  p_START_DATE, p_END_DATE, p_MEMBERS_ON_LEASE, 'EXPIRED'); 
        else
            if(count1<=0) THEN
                raise_application_error(-20000, 'Invalid Apartment-Apartment doesnt exist in Apartment table');
            end if;
        end if;
    end if;
END;
/
--SELECT MONTHS_BETWEEN('12-Nov-19','11-Nov-20')  FROM  DUAL ;
--SELECT MONTHS_BETWEEN(END_DATE, SYSDATE) into count_months2 FROM LEASE_DETAILS;
    
CALL PROD1('L31', 'A100', '12-Nov-21', '11-Nov-22', 2, null, 'C75', 'ABCD', 'XYZ', '8572842939', 
'SSS@GMAIL.COM', '111', '333', 'PETERBOROUGH', 'FENWAY', 'BOSTON', 'MA', 'USA', 2215);
select * from LEASE_DETAILS;
DELETE FROM LEASE_DETAILS WHERE LEASE_ID='L31';
delete from customers where customer_id='C75';
DESC CUSTOMERS;
SELECT * FROM CUSTOMERS;