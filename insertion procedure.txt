-----EMPLOYEE----
set serveroutput on;
create or replace PROCEDURE EMPLOYEE_INSERTION
(
    p_EMPLOYEE_ID EMPLOYEE.EMPLOYEE_ID%TYPE,
    p_ROLE_ID  EMPLOYEE_ROLES.ROLE_ID %TYPE,
    p_EMPLOYEE_FIRST_NAME EMPLOYEE.EMPLOYEE_FIRST_NAME%TYPE,
    p_EMPLOYEE_LAST_NAME EMPLOYEE.EMPLOYEE_LAST_NAME%TYPE,
    p_EMPLOYEE_CONTACT EMPLOYEE.EMPLOYEE_CONTACT%TYPE,
    p_EMPLOYEE_EMAIL EMPLOYEE.EMPLOYEE_EMAIL%TYPE,
    p_EMPLOYEE_APARTMENT_NUMBER EMPLOYEE.EMPLOYEE_APARTMENT_NUMBER%TYPE,
    p_EMPLOYEE_STREET_NAME EMPLOYEE.EMPLOYEE_STREET_NAME%TYPE,
    p_EMPLOYEE_NEIGHBOURHOOD EMPLOYEE.EMPLOYEE_NEIGHBOURHOOD%TYPE,
    p_EMPLOYEE_ZIPCODE EMPLOYEE.EMPLOYEE_ZIPCODE%TYPE

    
)
AS
CNT_EMP NUMBER;
CNT_ROL NUMBER;
FORIEGNKEY10 EXCEPTION;
FORIEGNKEY11 EXCEPTION;
FORIEGNKEY12 EXCEPTION;
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');

SELECT COUNT(*) INTO CNT_EMP FROM EMPLOYEE WHERE EMPLOYEE_ID =  p_EMPLOYEE_ID;
SELECT COUNT(*) INTO CNT_ROL FROM EMPLOYEE_ROLES WHERE ROLE_ID =  p_ROLE_ID;
 
IF (CNT_EMP>0 AND CNT_ROL <=0) THEN 
RAISE FORIEGNKEY10;
ELSE 
    IF(CNT_EMP >0) THEN
    RAISE FORIEGNKEY11;
    ELSE 
        IF (CNT_ROL <=0 ) THEN
        RAISE FORIEGNKEY12;
        ELSE
            INSERT INTO EMPLOYEE(EMPLOYEE_ID,ROLE_ID,EMPLOYEE_FIRST_NAME,EMPLOYEE_LAST_NAME,EMPLOYEE_CONTACT,EMPLOYEE_EMAIL,EMPLOYEE_APARTMENT_NUMBER,EMPLOYEE_STREET_NAME,
            EMPLOYEE_NEIGHBOURHOOD,EMPLOYEE_ZIPCODE) VALUES (p_EMPLOYEE_ID,p_ROLE_ID,p_EMPLOYEE_FIRST_NAME,p_EMPLOYEE_LAST_NAME,p_EMPLOYEE_CONTACT,p_EMPLOYEE_EMAIL,
            p_EMPLOYEE_APARTMENT_NUMBER,p_EMPLOYEE_STREET_NAME,p_EMPLOYEE_NEIGHBOURHOOD,p_EMPLOYEE_ZIPCODE );
        END IF;
    END IF;
END IF;
EXCEPTION 
WHEN FORIEGNKEY10 THEN
DBMS_OUTPUT.PUT_LINE('ROLE_ID DOES NOT EXISTS AND DUPLICATE EMPLOYEE_ID NOT ALLOWED');
WHEN FORIEGNKEY11 THEN
DBMS_OUTPUT.PUT_LINE('DUPLICATE EMPLOYEE_ID NOT ALLOWED');
WHEN FORIEGNKEY12 THEN
DBMS_OUTPUT.PUT_LINE('ROLE_ID DOES NOT EXISTS');

END EMPLOYEE_INSERTION;

CALL EMPLOYEE_INSERTION('E7','R1','A','A','A','A','A','A','A','A')
CALL EMPLOYEE_INSERTION('E20','R6','A','A','A','A','A','A','A','A')
CALL EMPLOYEE_INSERTION('E7','R6','A','A','A','A','A','A','A','A')
select * from employee













-----EMPLOYEE_APARTMENT--------
SELECT * FROM EMPLOYEE_APARTMENT
DESCRIBE EMPLOYEE_APARTMENT

set serveroutput on;
create or replace PROCEDURE EMPLOYEE_APARTMENT_INSERTION
(
    p_APARTMENT_ID APARTMENT.APARTMENT_ID%TYPE,
    p_EMPLOYEE_ID EMPLOYEE.EMPLOYEE_ID%TYPE 
)
AS
CNT_APT NUMBER;
CNT_EMP NUMBER;
FORIEGNKEY3 EXCEPTION;
FORIEGNKEY4 EXCEPTION;
FORIEGNKEY5 EXCEPTION;
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');

SELECT COUNT(*) INTO CNT_APT FROM APARTMENT WHERE APARTMENT_ID =  p_APARTMENT_ID;
SELECT COUNT(*) INTO CNT_EMP FROM EMPLOYEE WHERE EMPLOYEE_ID =  p_EMPLOYEE_ID;
 
IF (CNT_APT <=0 AND CNT_EMP <=0) THEN 
RAISE FORIEGNKEY5;
ELSE 
    IF(CNT_EMP <=0) THEN
    RAISE FORIEGNKEY4;
    ELSE 
        IF (CNT_APT <=0 ) THEN
        RAISE FORIEGNKEY3;
        ELSE
            INSERT INTO EMPLOYEE_APARTMENT(APARTMENT_ID,EMPLOYEE_ID) VALUES (p_APARTMENT_ID ,p_EMPLOYEE_ID);
        END IF;
    END IF;
END IF;
EXCEPTION 
WHEN FORIEGNKEY3 THEN
DBMS_OUTPUT.PUT_LINE('APARTMENT_ID DOES NOT EXISTS');
WHEN FORIEGNKEY4 THEN
DBMS_OUTPUT.PUT_LINE('EMPLOYEE_ID DOES NOT EXISTS');
WHEN FORIEGNKEY5 THEN
DBMS_OUTPUT.PUT_LINE('APARTMENT_ID AND EMPLOYEE_ID BOTH DOES NOT EXISTS');

END EMPLOYEE_APARTMENT_INSERTION;

CALL EMPLOYEE_APARTMENT_INSERTION('A32','E1')














-----APARTMENT_TYPE insertion procedure--------

set serveroutput on;
create or replace PROCEDURE APARTMENT_TYPE_INSERTION
(
    p_APARTMENT_TYPE_ID APARTMENT_TYPE.APARTMENT_TYPE_ID%TYPE,
   
    p_LOCALITY APARTMENT_TYPE.LOCALITY%TYPE, 
  
   
    p_APARTMENT_TYPE APARTMENT_TYPE.APARTMENT_TYPE%TYPE,
     p_NUMBER_OF_ROOMS APARTMENT_TYPE.NUMBER_OF_ROOMS%TYPE,
       p_NUMBER_OF_BATHS APARTMENT_TYPE.NUMBER_OF_BATHS%TYPE
   )
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');
INSERT INTO APARTMENT_TYPE(APARTMENT_TYPE_ID,LOCALITY,APARTMENT_TYPE,NUMBER_OF_ROOMS,NUMBER_OF_BATHS) VALUES ( p_APARTMENT_TYPE_ID ,p_LOCALITY, p_APARTMENT_TYPE,p_NUMBER_OF_ROOMS, p_NUMBER_OF_BATHS);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('DUPLICATE APARTMENT_TYPE_ID IS NOT ALLOWED');
END APARTMENT_TYPE_INSERTION;

CALL APARTMENT_TYPE_INSERTION('AT21','Star-Market','Apartment','2',1)
CALL APARTMENT_TYPE_INSERTION ('AT21','Star','Apartment','2',1)
SELECT * FROM  APARTMENT_TYPE;
describe APARTMENT_TYPE;














----------EMPLOYEE_ROLES----------------

set serveroutput on;
create or replace PROCEDURE EMPLOYEE_ROLES_INSERTION
(
    p_ROLE_ID EMPLOYEE_ROLES.ROLE_ID%TYPE,
   
    p_ROLE_TYPE EMPLOYEE_ROLES.ROLE_TYPE%TYPE --Using apartment table as we want to check if the apartment exists in apartment table
)
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');
INSERT INTO EMPLOYEE_ROLES(ROLE_ID,ROLE_TYPE) VALUES (p_ROLE_ID , p_ROLE_TYPE);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('DUPLICATE ROLE_ID IS NOT ALLOWED');
END EMPLOYEE_ROLES_INSERTION;

CALL EMPLOYEE_ROLES_INSERTION('R4','ABC')
CALL EMPLOYEE_ROLES_INSERTION('R4','AC')











