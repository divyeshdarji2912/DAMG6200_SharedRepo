--PAYMENT
set serveroutput on;
create or replace PROCEDURE PROD3
(
    p_PAYMENT_ID PAYMENT.PAYMENT_ID%TYPE,
   
    p_LEASE_ID LEASE_DETAILS.LEASE_ID%TYPE, --Using apartment table as we want to check if the apartment exists in apartment table
    p_AMOUNT_TRANSFERRED PAYMENT.AMOUNT_TRANSFERRED%TYPE,
    p_TRANSACTION_DATE PAYMENT.TRANSACTION_DATE%TYPE,
    p_PAYMENT_TYPE PAYMENT.PAYMENT_TYPE%TYPE
    
   )
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------');
INSERT INTO PAYMENT(PAYMENT_ID,LEASE_ID,AMOUNT_TRANSFERRED,TRANSACTION_DATE,PAYMENT_TYPE) VALUES ( p_PAYMENT_ID,p_LEASE_ID,p_AMOUNT_TRANSFERRED,p_TRANSACTION_DATE,p_PAYMENT_TYPE);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('Duplicate PAYMENT_ID found');
END prod3;

CALL PROD3('P1','L9',  18888, '12-NOV-21','ONLINE BANKING');
SELECT * FROM PAYMENT;
DESC PAYMENT;

--MAINTENANCE REQUESTS
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PROD4
(   
    p_REQUEST_ID MAINTENANCE_REQUESTS.REQUEST_ID%TYPE,
    p_APARTMENT_ID MAINTENANCE_REQUESTS.APARTMENT_ID%TYPE,
    p_EMPLOYEE_ID MAINTENANCE_REQUESTS.EMPLOYEE_ID%TYPE,
    p_REQUEST_DATE  MAINTENANCE_REQUESTS.REQUEST_DATE%TYPE
    --p_REQUEST_CLOSED_DATE  MAINTENANCE_REQUESTS.REQUEST_CLOSED_DATE %TYPE
)
AS
BEGIN
INSERT INTO MAINTENANCE_REQUESTS(REQUEST_ID, APARTMENT_ID, EMPLOYEE_ID, REQUEST_DATE) VALUES(  p_REQUEST_ID, p_APARTMENT_ID, p_EMPLOYEE_ID, p_REQUEST_DATE);
dbms_output.put_line('Successfully inserted row into MAINTENANCE_REQUESTS');
dbms_output.put_line('------------------------------------------------------------------------------------------------');
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
dbms_output.put_line('DUPLICATE REQUEST_ID NOT ALLOWED!'); 
END PROD4;

DESC MAINTENANCE_REQUESTS;

--UTILITY
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PROD5
(   
    p_UTILITY_ID UTILITY.UTILITY_ID%TYPE,
    p_UTILITY_NAME UTILITY.UTILITY_NAME%TYPE
)
AS
BEGIN
INSERT INTO UTILITY VALUES(p_UTILITY_ID,  p_UTILITY_NAME );
dbms_output.put_line('Successfully inserted row into UTILITY');
dbms_output.put_line('------------------------------------------------------------------------------------------------');
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
dbms_output.put_line('DUPLICATE UTILITY_ID IS NOT ALLOWED!'); 
END PROD5;

CALL PROD5('UT33', 'VVV');
TRUNCATE TABLE UTILITY;

--APARTMENT UTILITY
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PROD7
(   
    p_UTILITY_ID APARTMENT_UTILITY.UTILITY_ID%TYPE,
    p_APARTMENT_ID APARTMENT_UTILITY.APARTMENT_ID%TYPE,
    p_IS_INCLUDED_IN_RENT APARTMENT_UTILITY.IS_INCLUDED_IN_RENT%TYPE
)
AS
   count1 number;
   count2 number;
   foreignkey1 exception;
   foreignkey2 exception;
   foreignkey3 exception;
BEGIN
     SELECT COUNT(*) INTO count1 from APARTMENT where upper(p_APARTMENT_ID) like upper(APARTMENT_ID);
     SELECT COUNT(*) INTO count2 from UTILITY where upper(p_UTILITY_ID) like upper(UTILITY_ID);
     IF(count1<=0 and count2<=0) then
        raise foreignkey3;
     ELSE
        IF(count1<=0) then
            raise foreignkey1;
        elsif(count2<=0)then
            raise foreignkey2;
        else
            INSERT INTO APARTMENT_UTILITY VALUES(p_UTILITY_ID, p_APARTMENT_ID, p_IS_INCLUDED_IN_RENT );
        end if;
    END IF;
dbms_output.put_line('Successfully inserted row into UTILITY');
dbms_output.put_line('------------------------------------------------------------------------------------------------');
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
dbms_output.put_line('DUPLICATE UTILITY_ID IS NOT ALLOWED!'); 
when foreignkey1 then
dbms_output.put_line('ENTERED APARTMENT_ID DOESNT EXIST'); 
when foreignkey2 then
dbms_output.put_line('ENTERED UTILITY_ID DOESNT EXIST');
when foreignkey3 then
dbms_output.put_line('ENTERED APARTMENT_ID AND UTILITY_ID DOESNT EXIST');
END PROD7;

call prod7('UT101','A101','Yes');
select * from apartment_utility;

--FINAL PACKAGE
CREATE OR REPLACE Package body Insertion
as
PROCEDURE PROD1
(
    p_LEASE_ID LEASE_DETAILS.lease_id%TYPE,
   
    p_APARTMENT_ID APARTMENT.APARTMENT_ID%TYPE, --Using apartment table as we want to check if the apartment exists in apartment table
   
    p_START_DATE lease_details.start_date%TYPE,
    p_END_DATE lease_details.end_date%TYPE,
    p_MEMBERS_ON_LEASE lease_details.members_on_lease%TYPE,
    --p_LEASE_STATUS lease_details.lease_status%TYPE,
    
    
    p_CUSTOMER_FIRST_NAME CUSTOMERS.CUSTOMER_FIRST_NAME%TYPE,
    p_CUSTOMER_LAST_NAME CUSTOMERS.CUSTOMER_LAST_NAME%TYPE,
    p_CUSTOMER_CONTACT CUSTOMERS.CUSTOMER_CONTACT%TYPE,
    p_CUSTOMER_EMAIL CUSTOMERS.CUSTOMER_EMAIL%TYPE,
    p_CUSTOMER_APARTMENT_NUMBER CUSTOMERS.CUSTOMER_APARTMENT_NUMBER%TYPE,
    p_CUSTOMER_STREET_NUMBER CUSTOMERS.CUSTOMER_STREET_NUMBER%TYPE,
    p_CUSTOMER_STREET_NAME CUSTOMERS.CUSTOMER_STREET_NAME%TYPE,
    p_CUSTOMER_NEIGHBORHOOD CUSTOMERS.CUSTOMER_NEIGHBOURHOOD%TYPE,
    p_CUSTOMER_CITY CUSTOMERS.CUSTOMER_CITY%TYPE,
    p_CUSTOMER_STATE CUSTOMERS.CUSTOMER_STATE%TYPE,
    p_CUSTOMER_COUNTRY CUSTOMERS.CUSTOMER_COUNTRY%TYPE,
    p_CUSTOMER_ZIPCODE CUSTOMERS.CUSTOMER_ZIPCODE%TYPE,
    p_CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE
    
  
)
AS
  count_months1 int;  
  count1 number;
  count2 number;
  no_apartment EXCEPTION;
BEGIN 
    SELECT COUNT(*) INTO count1 from APARTMENT where upper(p_APARTMENT_ID) like upper(APARTMENT_ID);
    SELECT COUNT(*) INTO count2 from CUSTOMERS where upper(p_CUSTOMER_ID) like upper(CUSTOMER_ID);
    SELECT MONTHS_BETWEEN(p_END_DATE,SYSDATE) into count_months1 FROM dual; --FOR CHECKING LEASE EXPIRED/ONGOING
    
    if((count_months1>=0) AND (count2<=0) AND (count1>0) ) THEN  --Lease is ongoing and new customer
        INSERT INTO LEASE_DETAILS(LEASE_ID,APARTMENT_ID, START_DATE, END_DATE, MEMBERS_ON_LEASE) VALUES (p_LEASE_ID, p_APARTMENT_ID,  p_START_DATE, p_END_DATE, p_MEMBERS_ON_LEASE);
        INSERT INTO CUSTOMERS VALUES( p_LEASE_ID,p_CUSTOMER_FIRST_NAME, p_CUSTOMER_LAST_NAME, p_CUSTOMER_CONTACT,
                                     p_CUSTOMER_EMAIL, p_CUSTOMER_APARTMENT_NUMBER, p_CUSTOMER_STREET_NUMBER, p_CUSTOMER_STREET_NAME,
                                     p_CUSTOMER_NEIGHBORHOOD, p_CUSTOMER_CITY, p_CUSTOMER_STATE, p_CUSTOMER_COUNTRY, p_CUSTOMER_ZIPCODE,p_CUSTOMER_ID);
        
    else 
        if ((count_months1>=0) AND (count2>0) and (count1>0)) THEN  --Lease is ongoing and customer exists
            INSERT INTO LEASE_DETAILS (LEASE_ID,APARTMENT_ID, START_DATE, END_DATE, MEMBERS_ON_LEASE) VALUES (p_LEASE_ID, p_APARTMENT_ID,  p_START_DATE, p_END_DATE, p_MEMBERS_ON_LEASE);
        elsif ((count_months1<0)and (count1>0)) THEN  --Lease has expired (customer will already exist)
            INSERT INTO LEASE_DETAILS (LEASE_ID,APARTMENT_ID, START_DATE, END_DATE, MEMBERS_ON_LEASE) VALUES (p_LEASE_ID, p_APARTMENT_ID,  p_START_DATE, p_END_DATE, p_MEMBERS_ON_LEASE); 
        else
            if(count1<=0) THEN
                raise no_apartment;
            end if;
        end if;
    end if;
EXCEPTION
when no_apartment then
dbms_output.put_line('ENTERED APARTMENT_ID DOESNT EXIST! PLEASE ENTER VALID APARTMENT_ID');
END;
end insertion;

CREATE OR REPLACE PACKAGE INSERTION
AS 
PROCEDURE PROD1( 
    p_LEASE_ID LEASE_DETAILS.lease_id%TYPE,
   
    p_APARTMENT_ID APARTMENT.APARTMENT_ID%TYPE, 
    p_START_DATE lease_details.start_date%TYPE,
    p_END_DATE lease_details.end_date%TYPE,
    p_MEMBERS_ON_LEASE lease_details.members_on_lease%TYPE,
    --p_LEASE_STATUS lease_details.lease_status%TYPE,
    
    
    p_CUSTOMER_FIRST_NAME CUSTOMERS.CUSTOMER_FIRST_NAME%TYPE,
    p_CUSTOMER_LAST_NAME CUSTOMERS.CUSTOMER_LAST_NAME%TYPE,
    p_CUSTOMER_CONTACT CUSTOMERS.CUSTOMER_CONTACT%TYPE,
    p_CUSTOMER_EMAIL CUSTOMERS.CUSTOMER_EMAIL%TYPE,
    p_CUSTOMER_APARTMENT_NUMBER CUSTOMERS.CUSTOMER_APARTMENT_NUMBER%TYPE,
    p_CUSTOMER_STREET_NUMBER CUSTOMERS.CUSTOMER_STREET_NUMBER%TYPE,
    p_CUSTOMER_STREET_NAME CUSTOMERS.CUSTOMER_STREET_NAME%TYPE,
    p_CUSTOMER_NEIGHBORHOOD CUSTOMERS.CUSTOMER_NEIGHBOURHOOD%TYPE,
    p_CUSTOMER_CITY CUSTOMERS.CUSTOMER_CITY%TYPE,
    p_CUSTOMER_STATE CUSTOMERS.CUSTOMER_STATE%TYPE,
    p_CUSTOMER_COUNTRY CUSTOMERS.CUSTOMER_COUNTRY%TYPE,
    p_CUSTOMER_ZIPCODE CUSTOMERS.CUSTOMER_ZIPCODE%TYPE,
    p_CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE);
END insertion;



EXECUTE INSERTION.PROD1('L46', 'A100', '12-NOV-2019', '12-NOV-2020', 2, 'HJKLMN', 'PQRST', '8572842939', 'SR.D@GMAIL.COM', '111','333', 'BOYLSTON', 'FENWAY', 'BOSTON', 'MA','USA',2215,'C82');

SELECT * FROM LEASE_DETAILS;
TRUNCATE TABLE LEASE_DETAILS;





